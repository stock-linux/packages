name=rustc
version=1.70.0
release=2
description="The Rust programming language is designed to be a safe, concurrent, practical language."
source=(https://static.rust-lang.org/dist/$name-$version-src.tar.xz)
packager=Babilinx
makedepends=(cmake curl llvm python)
build() {
	cat > config.toml << "EOF"
# see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# tell x.py to not keep printing an annoying warning
changelog-seen = 2

[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/usr"
docdir = "/usr/share/doc/rustc-$version"

[rust]
channel = "stable"
description = "for Stock Linux"

# BLFS used to not install the FileCheck executable from llvm,
# so disabled codegen tests.  The assembly tests rely on FileCheck
# and cannot easily be disabled, so those will anyway fail if
# FileCheck has not been installed.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

EOF

	{ [ ! -e $PKG/usr/include/libssh2.h ] ||
		export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &&
	python3 ./x.py build

	DESTDIR=$PKG python3 ./x.py install
}

unpack() {
  tar -xf $name-$version-src.tar.*
  cd $name-$version-src
}

